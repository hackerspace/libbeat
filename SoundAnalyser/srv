#!/usr/bin/python
import re
import struct
import argparse
import Queue

from twisted.python import log
from twisted.internet import stdio, reactor
from twisted.internet.defer import Deferred
from twisted.protocols.basic import LineReceiver
from twisted.internet.protocol import DatagramProtocol

re_num = re.compile(r'\d+')


class BeatProto(LineReceiver):
    delimiter = '\n'
    ready_cb = Deferred()

    def __init__(self, router):
        self.router = router

    def lineReceived(self, line):
        if line.startswith('Snare'):
            self.router.snare()
        elif line.startswith('Drum'):
            self.router.drum()
        elif line.startswith('Custom'):
            self.router.custom(re_num.findall(line)[0])

    def quit(self):
        reactor.callLater(1, reactor.stop)


class Effect(object):
    def drum(self):
        pass

    def snare(self):
        pass

    def custom(self, freq):
        pass

    def inc(self, by=1):
        self.c.rainbow(self.c.rain + by)

class BRainbow(Effect):
    def drum(self):
        self.inc(40)

    def snare(self):
        self.inc(20)

    def custom(self, freq):
        self.inc()



class RGB(Effect):
    rgb = (205, 0, 0)

    def drum(self):
        self.flip()

    def snare(self):
        self.flip()

    def custom(self, freq):
        self.flip()

    def flip(self):
        self.c.rgb(*self.rgb)



class Strobe(Effect):
    on = True
    seq = [(0, 0, 0), (255, 255, 255), (0, 0, 0)]

    def drum(self):
        self.flip()

    def snare(self):
        self.flip()

    def custom(self, freq):
        self.flip()

    def flip(self):
        for c in self.seq:
            self.c.rgb(*c)

class NStrobe(Strobe):
    n = 2
    def flip(self):
        for i in range(self.n):
            self.c.rgb(0, 0, 0)
            self.c.rgb(255, 255, 255)
            self.c.rgb(0, 0, 0)


class INVStrobe(Strobe):
    seq = [(0, 0, 0), (0, 0, 0),
           (0, 0, 0), (0, 0, 0),
           (255, 255, 255)]


class VariStrobe(Strobe):
    d = [(0, 0, 0), (255, 255, 255), (0, 0, 0)]
    s = [(0, 0, 0), (100, 100, 100), (0, 0, 0)]
    cu = [(0, 0, 0), (50, 50, 50), (0, 0, 0)]

    def drum(self):
        for c in self.d:
            self.c.rgb(*c)

    def snare(self):
        for c in self.s:
            self.c.rgb(*c)

    def custom(self, freq):
        for c in self.cu:
            self.c.rgb(*c)


class RedVariStrobe(VariStrobe):
    d = [(0, 0, 0), (255, 0, 0), (0, 0, 0)]
    s = [(0, 0, 0), (100, 0, 0), (0, 0, 0)]
    cu = [(0, 0, 0), (50, 0, 0), (0, 0, 0)]

    pass


class XVariStrobe(VariStrobe):
    d = [(0, 0, 0), (0, 0, 100), (0, 0, 0)]
    s = [(0, 0, 0), (0, 0, 70), (0, 0, 0)]
    cu = [(0, 0, 0), (0, 0, 30), (0, 0, 0)]

    pass


class ColorStrobe(Strobe):
    seq = [(0, 0, 0), (255, 0, 0), (0, 0, 0)]

class RGBStrobe(Strobe):
    seq = [(55, 0, 0), (255, 0, 0), (55, 0, 0)]


# frikin yellow
class YStrobe(Strobe):
    seq = [(0, 0, 0), (100, 100, 0), (0, 0, 0)]

class CycleRGBStrobe(Strobe):
    counter = 0
    over = 300
    seq_counter = 0
    seqs = [
        [(55, 0, 0), (255, 0, 0), (55, 0, 0)],
        [(0, 55, 0), (0, 255, 0), (0, 55, 0)],
        [(0, 0, 55), (0, 0, 255), (0, 0, 55)],
        [(0, 0, 0), (255, 255, 255), (0, 0, 0)]
    ]

    def flip(self):
        if not self.seq:
            self.seq = self.seqs[0]

        for c in self.seq:
            self.c.rgb(*c)

        self.counter += 1
        if self.counter > self.over:
            self.counter = 0
            self.seq_counter += 1
            self.seq = self.seqs[self.seq_counter % len(self.seqs)]


class Router(object):
    def __init__(self):
        self.clients = []

    def drum(self):
        print('Drum')
        [c.eff.drum() for c in self.clients]

    def snare(self):
        print('Snare')
        [c.eff.snare() for c in self.clients]

    def custom(self, freq):
        print('{}'.format(freq))
        [c.eff.custom(freq) for c in self.clients]

class UDPClient(DatagramProtocol):
    cnt = 0
    rain = 0
    bright = 0
    addr = '10.0.0.129'
    eff = None

    def startProtocol(self):
        self.transport.connect(self.addr, 6666)
        self.transport.write('x')
        self.brightness(1024)

    def stopProtocol(self):
        self.doStart()

    def datagramReceived(self, datagram, host):
        if not self.cnt:
            cnt = struct.unpack('=i', datagram)
            self.cnt = cnt[0]
            print('Count received {}'.format(self.cnt))
        else:
            print('Data received {}'.format(repr(datagram)))

    def rainbow(self, val):
        self.rain = val
        self.rain %= 512
        self.send()

    def brightness(self, val):
        self.bright = val
        self.send(t='b')

    def send(self, t='r'):
        if t == 'r':
            data = struct.pack('=i', self.rain)
        elif t == 'b':
            data = struct.pack('=i', self.bright)

        self.transport.write(t)
        self.transport.write(data)

    def rgb(self, r, g, b):
        self.transport.write('a')
        data = struct.pack('='+'BBB'*self.cnt, *[b,g,r]*self.cnt)
        self.transport.write(data)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='hacked-cnc server')
    parser.add_argument('--stdio', action="store_true", default=False,
                        help='Use stdio')

    args = parser.parse_args()

    udpprotocol = UDPClient()
    udpprotocol2 = UDPClient()
    udpprotocol2.addr = '10.0.0.188'

    eff_t = CycleRGBStrobe

    eff = eff_t()
    eff.c = udpprotocol
    eff2 = eff_t()
    eff2.c = udpprotocol2

    """
    eff = NStrobe()
    eff = ColorStrobe()
    eff = RGB()
    eff = VariStrobe()
    eff = RedVariStrobe()
    eff = BRainbow()
    eff = XVariStrobe()
    eff = CycleRGBStrobe()
    eff = Strobe()
    eff = VariStrobe()
    eff = RGBStrobe()
    eff = INVStrobe()
    eff.c = udpprotocol

    eff2 = ColorStrobe()
    eff2 = RGB()
    eff2 = VariStrobe()
    eff2 = RedVariStrobe()
    eff2 = BRainbow()
    eff2 = RedVariStrobe()
    eff2 = CycleRGBStrobe()
    eff2 = Strobe()
    eff2 = RGBStrobe()
    eff2 = INVStrobe()
    eff2.c = udpprotocol2
    """

    udpprotocol.eff = eff
    udpprotocol2.eff = eff2

    t = reactor.listenUDP(0, udpprotocol)
    t2 = reactor.listenUDP(0, udpprotocol2)

    router = Router()
    router.clients.append(udpprotocol)
    router.clients.append(udpprotocol2)
    proto = BeatProto(router)

    stdio.StandardIO(proto)

    reactor.run()
